@using Cwrs.DataBase.Models;
@model IEnumerable<PhuongAnChuyenDoi>

@{
    ViewBag.Title = "Index";
    bool? callToController = ViewBag.CallToController as bool?;
    if(Request.IsAjaxRequest())
    {
        Layout = null;
    }
    else
    {
        Layout = "~/Views/Shared/_LayoutClipTwo.cshtml";
    }
}

<style>
    table, th, td {
        border: 1px solid #0094ff;
        border-collapse: collapse;
        padding: 10px;
        color: #000000;
    }

    th {
        text-align: center;
        background: #EEEEEE;
    }

    td {
        text-align: center;
    }

    .FixMinWidth {
        min-width: 65px;
    }

    a {
        color: #0094ff;
    }

    a:hover {
        color: #b6ff00;
    }

    #data_table {
        overflow: auto;
    }

    .tableFloatingHeaderOriginal {
        background: #FFF;
    }
</style>
<script src="~/Scripts/PhuongAn/TongHop.js"></script>
<div>
    <h3 style="text-align:center;color:#000000; padding-top:20px"><b>TỔNG HỢP KẾT QUẢ TÍNH TOÁN PHƯƠNG ÁN ĐIỀU HÀNH LIÊN HỒ CHỨA </b></h3>
</div>
<a data-ajax="true" data-ajax-method="GET"
   data-ajax-mode="replace" data-ajax-update="#container" style="float: right; padding: 0px 15px 3px 5px;"
   href="~/PhuongAn/QuyDinhQuyTrinh" onclick="AddBreadCrumb(2, 'So sánh với quy định quy trình', '');">So sánh với quy định của quy trình</a>
<div class="col-sm-12" style=" padding: 0px 0px">
    <div class="col-sm-12 col-xs-12 col-md-12" style="background:#0026ff">
        <div style="margin-top: 10px">
            <div class="col-sm-6">
            </div>
            <div class="col-sm-6">
                <h4 style="float:right; color:#ffffff; padding-right: 10px;font-size: 12px"> Cập nhật lúc: @DateTime.Now.Hour:@DateTime.Now.Minute  @DateTime.Now.Day/@DateTime.Now.Month/@DateTime.Now.Year</h4>
            </div>
        </div>
    </div>
    <div id="data_table" class="col-sm-12 col-xs-12 col-md-12" style="padding: 0px">
        <table class="col-sm-12" style="min-width:1280px ">
            <thead>
                <tr>
                    <th rowspan="3" style="width:5%; min-width: 80px">Đơn vị </th>
                    <th colspan="2" style="width:20%; min-width: 225px">Phương án điều hành</th>
                    <th colspan="4" style="width:20%; min-width: 260px">Hồ Sơn La</th>
                    <th colspan="4" style="width:20%; min-width: 260px">Hồ Hòa Bình</th>
                    <th colspan="4" style="width:20%; min-width: 260px">Hồ Tuyên Quang</th>
                    <th colspan="3" style="width:15%; min-width: 195px">Hạ Lưu</th>
                </tr>
                <tr>
                    <th style="min-width: 125px">Đóng/Mở</th>
                    <th style="min-width: 100px; max-width: 125px" rowspan="2">Thời Điểm</th>
                    <th rowspan="2" class="FixMinWidth">Số cửa xả đáy</th>
                    <th rowspan="2" class="FixMinWidth">Số cửa xả mặt</th>
                    <th rowspan="2" class="FixMinWidth">Lưu lượng về hồ (m<sup>3</sup>/s)</th>
                    <th rowspan="2" class="FixMinWidth">Mực nước hồ (m)</th>

                    <th rowspan="2" class="FixMinWidth">Số cửa xả đáy</th>
                    <th rowspan="2" class="FixMinWidth">Số cửa xả mặt</th>
                    <th rowspan="2" class="FixMinWidth">Lưu lượng về hồ (m<sup>3</sup>/s)</th>
                    <th rowspan="2" class="FixMinWidth">Mực nước hồ (m)</th>

                    <th rowspan="2" class="FixMinWidth">Số cửa xả đáy</th>
                    <th rowspan="2" class="FixMinWidth">Số cửa xả mặt</th>
                    <th rowspan="2" class="FixMinWidth">Lưu lượng về hồ (m<sup>3</sup>/s)</th>
                    <th rowspan="2" class="FixMinWidth">Mực nước hồ (m)</th>

                    <th rowspan="2" class="FixMinWidth">Hà Nội (m)</th>
                    <th rowspan="2" class="FixMinWidth">Phả Lại (m)</th>
                    <th rowspan="2" class="FixMinWidth">Tx.Tuyên Quang (m)</th>
                </tr>
                <tr>
                    <th>Cửa số</th>
                </tr>
            </thead>
            @if (Model != null )
            {
            <tbody>
                @foreach (PhuongAnChuyenDoi item in Model)
                {
                <tr>
                    @if (item.RowDonVi != 0)
                        {
                    <td rowspan="@item.RowDonVi">
                        @Html.DisplayFor(items => item.Don_Vi)
                    </td>
                        }
                    @if (item.RowPhuongAn != 0)
                        {
                    <td rowspan="@item.RowPhuongAn">
                        @Html.DisplayFor(items => item.Phuong_An)
                    </td>
                        }
                    <td>@Html.DisplayFor(items => item.Thoi_Diem)</td>
                    <td>@Html.DisplayFor(items => item.SonLa_XaDay)</td>
                    <td>@Html.DisplayFor(items => item.SonLa_XaMat)</td>
                    <td>@Html.DisplayFor(items => item.SonLa_LuuLuong)</td>
                    <td>@Html.DisplayFor(items => item.SonLa_MucNuoc)</td>
                    <td>@Html.DisplayFor(items => item.HoaBinh_XaDay)</td>
                    <td>@Html.DisplayFor(items => item.HoaBinh_XaMat)</td>
                    <td>@Html.DisplayFor(items => item.HoaBinh_LuuLuong)</td>
                    <td>@Html.DisplayFor(items => item.HoaBinh_MucNuoc)</td>
                    <td>@Html.DisplayFor(items => item.TuyenQuang_XaDay)</td>
                    <td>@Html.DisplayFor(items => item.TuyenQuang_XaMat)</td>
                    <td>@Html.DisplayFor(items => item.TuyenQuang_LuuLuong)</td>
                    <td>@Html.DisplayFor(items => item.TuyenQuang_MucNuoc)</td>
                    <td>@Html.DisplayFor(items => item.HaLuu_HaNoi)</td>
                    <td>@Html.DisplayFor(items => item.HaLuu_PhaLai)</td>
                    <td style="text-align:center;">@Html.DisplayFor(items => item.HaLuu_TuyenQuang)</td>
                </tr>
                }
            </tbody>
            }
        </table>
    </div>

</div>
<div class="col-sm-12" style="padding-top: 10px">
    <div class="col-sm-12" style="padding: 10px auto">
        <div>
            <div id="PhanTich-title" class="bcnvtc-texta"><b>Phân tích, nhận xét về xu thế lũ:  </b></div>
            <div>
                @Html.TextArea("PhanTich", "", new { style = "width: 100%;height: 45px;" })
            </div>
        </div>
        <div>
            <div id="TongHop-title" class="bcnvtc-texta"><b>Tổng hợp các kết quả tính toán của 6 đơn vị: </b></div>
            <div>
                @Html.TextArea("TongHop", "", new { style = "width: 100%;height: 45px;" })
            </div>
        </div>
        <div>
            <div id="KienNghi-title" class="bcnvtc-texta"><b>Kiến nghị phương án điều hành cụ thể:  </b></div>
            <div>
                @Html.TextArea("KienNghi", "", new { style = "width: 100%;height: 45px;" })
            </div>
        </div>
    </div>
    <div class="form-group" style="margin: 5px auto 5px 15px">
        <a class="btn btn-red" onclick="SaveTongHop()"><i class="glyphicon glyphicon-floppy-disk"></i> Cập nhật</a>
    </div>
</div>


<script>
    
    /*! Copyright (c) 2011 by Jonas Mosbech - https://github.com/jmosbech/StickyTableHeaders
        MIT license info: https://github.com/jmosbech/StickyTableHeaders/blob/master/license.txt */

    
    (function ($, window, undefined) {
        'use strict';

        var name = 'stickyTableHeaders',
            id = 0,
            defaults = {
                fixedOffset: 0,
                leftOffset: 0,
                marginTop: 0,
                scrollableArea: '#data_table'
            };


        function Plugin(el, options) {
            // To avoid scope issues, use 'base' instead of 'this'
            // to reference this class from internal events and functions.
            var base = this;

            // Access to jQuery and DOM versions of element
            base.$el = $(el);
            base.el = el;
            base.id = id++;
            console.log($(window));
            base.$window = $(window);
            base.$document = $(document);

            // Listen for destroyed, call teardown
            base.$el.bind('destroyed',
                $.proxy(base.teardown, base));

            // Cache DOM refs for performance reasons
            base.$clonedHeader = null;
            base.$originalHeader = null;

            // Keep track of state
            base.isSticky = true;
            base.hasBeenSticky = true;
            base.leftOffset = null;
            base.topOffset = null;

            base.init = function () {
                base.$el.each(function () {
                    var $this = $(this);

                    // remove padding on <table> to fix issue #7
                    $this.css('padding', 0);

                    base.$originalHeader = $('thead:first', this);
                    base.$clonedHeader = base.$originalHeader.clone();
                    $this.trigger('clonedHeader.' + name, [base.$clonedHeader]);

                    base.$clonedHeader.addClass('tableFloatingHeader');
                    base.$clonedHeader.css('display', 'none');

                    base.$originalHeader.addClass('tableFloatingHeaderOriginal');

                    base.$originalHeader.after(base.$clonedHeader);

                    base.$printStyle = $('<style type="text/css" media="print">' +
                        '.tableFloatingHeader{display:none !important;}' +
                        '.tableFloatingHeaderOriginal{position:static !important;}' +
                        '</style>');
                    $('head').append(base.$printStyle);
                });

                base.setOptions(options);
                base.updateWidth();
                base.toggleHeaders();
                base.bind();
            };

            base.destroy = function () {
                base.$el.unbind('destroyed', base.teardown);
                base.teardown();
            };

            base.teardown = function () {
                if (base.isSticky) {
                    base.$originalHeader.css('position', 'static');
                }
                $.removeData(base.el, 'plugin_' + name);
                base.unbind();

                base.$clonedHeader.remove();
                base.$originalHeader.removeClass('tableFloatingHeaderOriginal');
                base.$originalHeader.css('visibility', 'visible');
                base.$printStyle.remove();

                base.el = null;
                base.$el = null;
            };

            base.bind = function () {
                base.$scrollableArea.on('scroll.' + name, base.toggleHeaders);
                if (!base.isWindowScrolling) {
                    base.$window.on('scroll.' + name + base.id, base.setPositionValues);
                    base.$window.on('resize.' + name + base.id, base.toggleHeaders);
                }
                base.$scrollableArea.on('resize.' + name, base.toggleHeaders);
                base.$scrollableArea.on('resize.' + name, base.updateWidth);
            };

            base.unbind = function () {
                // unbind window events by specifying handle so we don't remove too much
                base.$scrollableArea.off('.' + name, base.toggleHeaders);
                if (!base.isWindowScrolling) {
                    base.$window.off('.' + name + base.id, base.setPositionValues);
                    base.$window.off('.' + name + base.id, base.toggleHeaders);
                }
                base.$scrollableArea.off('.' + name, base.updateWidth);
            };

            base.toggleHeaders = function () {
                if (base.$el) {
                    base.$el.each(function () {
                        var $this = $(this),
                            newLeft,
                            newTopOffset = base.isWindowScrolling ? (
                                isNaN(base.options.fixedOffset) ? base.options.fixedOffset.outerHeight() : base.options.fixedOffset) : base.$scrollableArea.offset().top + (!isNaN(base.options.fixedOffset) ? base.options.fixedOffset : 0),
                            offset = $this.offset(),

                            scrollTop = base.$scrollableArea.scrollTop() + newTopOffset,
                            scrollLeft = base.$scrollableArea.scrollLeft(),

                            scrolledPastTop = base.isWindowScrolling ? scrollTop > offset.top : newTopOffset > offset.top,
                            notScrolledPastBottom = (base.isWindowScrolling ? scrollTop : 0) < (offset.top + $this.height() - base.$clonedHeader.height() - (base.isWindowScrolling ? 0 : newTopOffset));

                        if (scrolledPastTop && notScrolledPastBottom) {
                            // newLeft = offset.left - scrollLeft + base.options.leftOffset;
                            newLeft = offset.left - base.options.leftOffset;
                            //newLeft = offset.left - scrollLeft;
                            base.$originalHeader.css({
                                'position': 'fixed',
                                'margin-top': base.options.marginTop,
                                'left': newLeft,
                                'z-index': 101, // #18: opacity bug
                            });
                            base.leftOffset = newLeft;
                            base.topOffset = newTopOffset;
                            base.$clonedHeader.css('display', '');
                            if (!base.isSticky) {
                                base.isSticky = true;
                                // make sure the width is correct: the user might have resized the browser while in static mode
                                base.updateWidth();
                            }
                            base.setPositionValues();
                        } else if (base.isSticky) {
                            base.$originalHeader.css('position', 'static');
                            base.$clonedHeader.css('display', 'none');
                            base.isSticky = false;
                            base.resetWidth($('td,th', base.$clonedHeader), $('td,th', base.$originalHeader));
                        }
                    });
                }
            };

            base.setPositionValues = function () {
                var winScrollTop = base.$window.scrollTop(),
                    winScrollLeft = base.$window.scrollLeft();
                if (!base.isSticky || winScrollTop < 0 || winScrollTop + base.$window.height() > base.$document.height() || winScrollLeft < 0 || winScrollLeft + base.$window.width() > base.$document.width()) {
                    return;
                }
                base.$originalHeader.css({
                    'top': base.topOffset - (base.isWindowScrolling ? 0 : winScrollTop),
                    'left': base.leftOffset - (base.isWindowScrolling ? 0 : winScrollLeft)
                });
            };

            base.updateWidth = function () {
                if (!base.isSticky) {
                    return;
                }
                // Copy cell widths from clone
                if (!base.$originalHeaderCells) {
                    base.$originalHeaderCells = $('th,td', base.$originalHeader);
                }
                if (!base.$clonedHeaderCells) {
                    base.$clonedHeaderCells = $('th,td', base.$clonedHeader);
                }
                var cellWidths = base.getWidth(base.$clonedHeaderCells);
                base.setWidth(cellWidths, base.$clonedHeaderCells, base.$originalHeaderCells);

                // Copy row width from whole table
                base.$originalHeader.css('width', base.$clonedHeader.width());
            };

            base.getWidth = function ($clonedHeaders) {
                var widths = [];
                $clonedHeaders.each(function (index) {
                    var width, $this = $(this);

                    if ($this.css('box-sizing') === 'border-box') {
                        width = $this[0].getBoundingClientRect().width; // #39: border-box bug
                    } else {
                        var $origTh = $('th', base.$originalHeader);
                        if ($origTh.css('border-collapse') === 'collapse') {
                            if (window.getComputedStyle) {
                                width = parseFloat(window.getComputedStyle(this, null).width);
                            } else {
                                // ie8 only
                                var leftPadding = parseFloat($this.css('padding-left'));
                                var rightPadding = parseFloat($this.css('padding-right'));
                                // Needs more investigation - this is assuming constant border around this cell and it's neighbours.
                                var border = parseFloat($this.css('border-width'));
                                width = $this.outerWidth() - leftPadding - rightPadding - border;
                            }
                        } else {
                            width = $this.width();
                        }
                    }

                    widths[index] = width;
                });
                return widths;
            };

            base.setWidth = function (widths, $clonedHeaders, $origHeaders) {
                $clonedHeaders.each(function (index) {
                    var width = widths[index];
                    $origHeaders.eq(index).css({
                        'min-width': width,
                        'max-width': width
                    });
                });
            };

            base.resetWidth = function ($clonedHeaders, $origHeaders) {
                $clonedHeaders.each(function (index) {
                    var $this = $(this);
                    $origHeaders.eq(index).css({
                        'min-width': $this.css('min-width'),
                        'max-width': $this.css('max-width')
                    });
                });
            };

            base.setOptions = function (options) {
                base.options = $.extend({}, defaults, options);
                base.$scrollableArea = $(base.options.scrollableArea);
                base.isWindowScrolling = base.$scrollableArea[0] === window;
            };

            base.updateOptions = function (options) {
                base.setOptions(options);
                // scrollableArea might have changed
                base.unbind();
                base.bind();
                base.updateWidth();
                base.toggleHeaders();
            };

            // Run initializer
            base.init();
        }
        // A plugin wrapper around the constructor,
        // preventing against multiple instantiations
        $.fn[name] = function (options) {
            return this.each(function () {
                var instance = $.data(this, 'plugin_' + name);
                if (instance) {
                    if (typeof options === 'string') {
                        instance[options].apply(instance);
                    } else {
                        instance.updateOptions(options);
                    }
                } else if (options !== 'destroy') {
                    $.data(this, 'plugin_' + name, new Plugin(this, options));
                }
            });
        };

    })(jQuery, window);
</script>
<script>
    $(document).ready(function () {
        AddBreadCrumb(1, 'Phương án vận hành', '');
        home.DanhDauMenu('PhuongAn', 0);
        FillTongHop();
    });
    $("#data_table table").stickyTableHeaders();
    var min_height = $('body').height() - 280;
    if (min_height < 600) {
        min_height = 600;
    }
    $("#data_table").height(min_height);
    $("#data_table").scroll(function () {
        $("#data_table table").stickyTableHeaders();
    });
    $(window).resize(function () {
        $("#data_table").height(min_height);
        $("#data_table table").stickyTableHeaders();
    });
    $('#app').on('click', 'a.sidebar-toggler', function () {
        $("#data_table").height(min_height);
        $("#data_table table").stickyTableHeaders();
    });
</script>
